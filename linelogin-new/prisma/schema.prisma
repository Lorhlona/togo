generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id             String           @id @default(cuid())
  patientId      String           @unique
  lastName       String
  firstName      String
  dateOfBirth    String
  gender         String
  lineUserId     String?          @unique
  postalCode     String
  address        String
  phoneNumber    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  medicalRecords MedicalRecord[]
  summaries      PatientSummary[]
  reservations   Reservation[]
}

model MedicalRecord {
  id        String   @id @default(cuid())
  patientId String
  visitDate DateTime
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model PatientSummary {
  id        String   @id @default(cuid())
  patientId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum VisitStatus {
  WAITING     // 未チェックイン
  CHECKED_IN  // チェックイン済み
  COMPLETED   // 診察終了
}

model TimeSlot {
  id           String        @id @default(cuid())
  startTime    DateTime
  endTime      DateTime
  isAvailable  Boolean       @default(true)
  maxPatients  Int          // 初診1人、再診2人
  isFirstVisit Boolean      // 初診枠か再診枠かを区別
  duration     Int          // 分単位（15分 or 30分）
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]

  @@index([startTime])
  @@index([endTime])
}

model Reservation {
  id           String            @id @default(cuid())
  patientId    String
  timeSlotId   String
  isFirstVisit Boolean
  status       ReservationStatus @default(CONFIRMED)
  visitStatus  VisitStatus       @default(WAITING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  patient      Patient           @relation(fields: [patientId], references: [id])
  timeSlot     TimeSlot          @relation(fields: [timeSlotId], references: [id])

  @@index([patientId])
  @@index([timeSlotId])
}
